// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/rombintu/avito-pvz-project/internal/storage (interfaces: Storage)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/rombintu/avito-pvz-project/internal/models"
)

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// AddProduct mocks base method.
func (m *MockStorage) AddProduct(arg0 context.Context, arg1 *models.Product) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddProduct", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddProduct indicates an expected call of AddProduct.
func (mr *MockStorageMockRecorder) AddProduct(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddProduct", reflect.TypeOf((*MockStorage)(nil).AddProduct), arg0, arg1)
}

// CloseReception mocks base method.
func (m *MockStorage) CloseReception(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseReception", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseReception indicates an expected call of CloseReception.
func (mr *MockStorageMockRecorder) CloseReception(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseReception", reflect.TypeOf((*MockStorage)(nil).CloseReception), arg0, arg1)
}

// CreatePVZ mocks base method.
func (m *MockStorage) CreatePVZ(arg0 context.Context, arg1 *models.PVZ) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePVZ", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreatePVZ indicates an expected call of CreatePVZ.
func (mr *MockStorageMockRecorder) CreatePVZ(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePVZ", reflect.TypeOf((*MockStorage)(nil).CreatePVZ), arg0, arg1)
}

// CreateReception mocks base method.
func (m *MockStorage) CreateReception(arg0 context.Context, arg1 *models.Reception) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateReception", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateReception indicates an expected call of CreateReception.
func (mr *MockStorageMockRecorder) CreateReception(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateReception", reflect.TypeOf((*MockStorage)(nil).CreateReception), arg0, arg1)
}

// CreateUser mocks base method.
func (m *MockStorage) CreateUser(arg0 context.Context, arg1 *models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockStorageMockRecorder) CreateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockStorage)(nil).CreateUser), arg0, arg1)
}

// DeleteProduct mocks base method.
func (m *MockStorage) DeleteProduct(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProduct", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProduct indicates an expected call of DeleteProduct.
func (mr *MockStorageMockRecorder) DeleteProduct(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProduct", reflect.TypeOf((*MockStorage)(nil).DeleteProduct), arg0, arg1)
}

// GetLastProduct mocks base method.
func (m *MockStorage) GetLastProduct(arg0 context.Context, arg1 string) (*models.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastProduct", arg0, arg1)
	ret0, _ := ret[0].(*models.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLastProduct indicates an expected call of GetLastProduct.
func (mr *MockStorageMockRecorder) GetLastProduct(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastProduct", reflect.TypeOf((*MockStorage)(nil).GetLastProduct), arg0, arg1)
}

// GetOpenReception mocks base method.
func (m *MockStorage) GetOpenReception(arg0 context.Context, arg1 string) (*models.Reception, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOpenReception", arg0, arg1)
	ret0, _ := ret[0].(*models.Reception)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOpenReception indicates an expected call of GetOpenReception.
func (mr *MockStorageMockRecorder) GetOpenReception(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOpenReception", reflect.TypeOf((*MockStorage)(nil).GetOpenReception), arg0, arg1)
}

// GetPVZs mocks base method.
func (m *MockStorage) GetPVZs(arg0 context.Context, arg1 models.PVZFilter) ([]*models.PVZ, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPVZs", arg0, arg1)
	ret0, _ := ret[0].([]*models.PVZ)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPVZs indicates an expected call of GetPVZs.
func (mr *MockStorageMockRecorder) GetPVZs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPVZs", reflect.TypeOf((*MockStorage)(nil).GetPVZs), arg0, arg1)
}

// GetUserByEmail mocks base method.
func (m *MockStorage) GetUserByEmail(arg0 context.Context, arg1 string) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", arg0, arg1)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockStorageMockRecorder) GetUserByEmail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockStorage)(nil).GetUserByEmail), arg0, arg1)
}
